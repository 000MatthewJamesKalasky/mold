.TH MOLD 1
.SH NAME
mold \- A Modern Linker

.SH SYNOPSIS
mold [\fBoptions\fR] \fIobjfile\fR \fB...\fR

.SH DESCRIPTION
\fBmold\fR is a multi-threaded, high-performance linker that is
several times faster than the industry-standard ones, namely, GNU ld,
GNU gold or LLVM lld. It is developed as a drop-in replacement for
these linkers and command-line compatible with them with a few
exceptions.
.PP
Note that even though many userland programs, including large ones
such as Chrome and Firefox, can be built with \fBmold\fR, \fBmold\fR
is still very experimental. It supports Linux/x86-64 and Linux/i386.

.SS "How to use mold"
On Unix, \fBcc\fR (or \fBgcc\fR or \fBclang\fR, depending on what
compiler you use) is not just a C compiler but is actually a compiler
driver for various kinds of input files. \fBcc\fR dispatches based
on input file extensions. If you pass object files (\fB.o\fR files) to
a compiler driver, the linker command, which is usually installed as
\fB/usr/bin/ld\fR, is invoked as a backend.
.PP
To use an alternative linker, you have to modify a build config file
such as \fBMakefile\fR or \fBcargo.toml\fR to pass an appropriate
option to a compiler driver which invokes a linker. The problem is
that it is not always clear how to do that. In a complicated build
system, it can be very hard to figure out how to convince a system to
use a non-standard linker.
.PP
To deal with the situation, \fBmold\fR provides a convenient option to
force any build system to use \fBmold\fR. To use the feature, invoke
\fBmake\fR or a build command of your choice (such as \fBcargo
build\fR) as follows:
.PP
.Vb 1
\&    mold \-run make <make arguments if any>
.Ve
.PP
If you run a build command like above, the command runs under the
influence of \fBmold\fR so that when the command tries to run
\fB/usr/bin/ld\fR, \fBmold\fR is silently invoked instead.
.PP
Internally, \fBmold\fR invokes a given command with the
\fBLD_PRELOAD\fR environment variable set to its companion shared
object file. The shared object file intercepts all \fBexec()\fR-family
functions to run \fBmold\fR if \fB/usr/bin/ld\fR is attempted to be
run.
.PP
If you don't want to use the \fB\-run\fR option, and if you are using
\fBclang\fR, you can pass \fB\-fuse\-ld=/absolute/path/to/mold\fR to
\fBclang\fR to used \fBmold\fR. If you are using \fBgcc\fR, it looks
like there's unfortunately no easy way to force it to use \fBmold\fR,
as \fBgcc\fR doesn't take an arbitrary pathname as an argument for
\fB\-fuse\-ld\fR.

.SS Compatibility
\fBmold\fR is designed to be a drop-in replacement for the GNU linkers
for linking user-land programs. If your user-land program cannot be
built due to missing command-line options, please file a bug at
\fBhttps://github.com/rui314/mold/issues\fR.

\fBmold\fR supports a very limited set of linker script features,
which is sufficient to read \fB/usr/lib/x86_64-linux-gnu/libc.so\fR on
Linux systems (on Linux, that file is despite its name not a shared
library but an ASCII linker script that loads a real libc.so file!)
Beyond that, I have no plan to support any linker script features.
The linker script is an ad-hoc, over-designed, complex language which
I believe needs to be disrupted by a simpler mechanism. I have a plan
to add a replacement for the linker script to \fBmold\fR instead.

.SH OPTIONS
.IP "--help"
Report usage information
.IP "-v, --version"
Report version information
.IP "-V"
Report version and target information
.IP "-(, --start-group"
Ignored
.IP "-), --end-group"
Ignored
.IP "-C DIR, --directory DIR"
Change to DIR before doing anything
.IP "-E, --export-dynamic"
Put symbols in the dynamic symbol table
.IP "--no-export-dynamic"
Do not put symbols in the dynamic symbol table
.IP "-F LIBNAME, --filter LIBNAME"
Set DT_FILTER to the specified value
.IP "-I FILE, --dynamic-linker FILE"
Set dynamic linker path
.IP "--no-dynamic-linker"
Do not set dynamic linker path
.IP "-L DIR, --library-path DIR"
Add DIR to library search path
.IP "-M, --print-map"
Write map file to stdout
.IP "-N, --omagic"
Do not page align data, do not make text readonly
.IP "--no-omagic"
Page align data, make text readonly
.IP "-O NUMBER"
Ignored
.IP "-S, --strip-debug"
Strip .debug_* sections
.IP "-T FILE, --script FILE"
Read linker script
.IP "-X, --discard-locals"
Discard temporary local symbols
.IP "-e SYMBOL, --entry SYMBOL"
Set program entry point
.IP "-f SHLIB, --auxiliary SHLI"
B Set DT_AUXILIARY to the specified value
.IP "-h LIBNAME, --soname LIBNAME"
Set shared library name
.IP "-l LIBNAME"
Search for a given library
.IP "-m EMULATION"
Ignored
.IP "-o FILE"
Set output filename
.IP "-s, --strip-all"
Strip .symtab section
.IP "-u SYMBOL, --undefined SYMBOL"
Force to resolve SYMBOL
.IP "--Bdynamic"
Link against shared libraries (default)
.IP "--Bstatic"
Do not link against shared libraries
.IP "--Bsymbolic"
Bind global symbols locally
.IP "--Bsymbolic-functions"
Bind global functions locally
.IP "--Map FILE"
Write map file to a given file
.IP "--allow-multiple-definitio"
n Ignored
.IP "--as-needed"
Only set DT_NEEDED if used
.IP "--no-as-needed"
Always set DT_NEEDED
.IP "--build-id [none,md5,sha1,sha256,uuid,HEXSTRING]"
Generate build ID
.IP "--no-build-id"
Do not generate build ID
.IP "--chroot DIR"
Set a given path to root directory
.IP "--color-diagnostics"
Ignored
.IP "--compress-debug-sections [none,zlib,zlib-gabi]"
Compress .debug_* sections
.IP "--demangle"
Demangle C++ symbols in log messages (default)
.IP "--no-demangle"
Do not demangle
.IP "--disable-new-dtags"
Ignored
.IP "--dynamic-list"
Read a list of dynamic symbols
.IP "--eh-frame-hdr"
Create .eh_frame_hdr section
.IP "--no-eh-frame-hdr"
Do not create .eh_frame_hdr section (default)
.IP "--enable-new-dtags"
Ignored
.IP "--exclude-libs LIB,LIB,.."
Mark all symbols in given libraries hidden
.IP "--fatal-warnings"
Ignored
.IP "--no-fatal-warnings"
Ignored
.IP "--fini SYMBOL"
Call SYMBOL at unload-time
.IP "--fork"
Spawn a child process (default)
.IP "--no-fork"
Do not spawn a child process
.IP "--gc-sections"
Remove unreferenced sections
.IP "--no-gc-sections"
Do not remove unreferenced sections
.IP "--gdb-index"
Ignored
.IP "--hash-style [sysv,gnu,both]"
Set hash style
.IP "--icf"
Fold identical code
.IP "--no-icf"
Do not fold identical code
.IP "--init SYMBOL"
Call SYMBOl at load-time
.IP "--no-undefined"
Report undefined symbols (even with --shared)
.IP "--perf"
Print performance statistics
.IP "--pie, --pic-executable"
Create a position independent executable
.IP "--no-pie, --no-pic-executable"
Do not create a position independent executable
.IP "--plugin"
Ignored
.IP "--plugin-opt"
Ignored
.IP "--pop-state"
Pop state of flags governing input file handling
.IP "--preload"
Preload object files
.IP " --print-gc-sections"
Print removed unreferenced sections
.IP "--no-print-gc-sections"
Do not print removed unreferenced sections (default)
.IP "--print-icf-sections"
Print folded identical sections
.IP "--no-print-icf-sections"
Do not print folded identical sections
.IP "--push-state"
Pop state of flags governing input file handling
.IP "--quick-exit"
Use quick_exit to exit (default)
.IP "--no-quick-exit"
Do not use quick_exit to exit
.IP "--relax"
Optimize instructions (default)
.IP "--no-relax"
Do not optimize instructions
.IP "--repro"
Embed input files to .repro section
.IP "--rpath DIR"
Add DIR to runtime search path
.IP "--rpath-link DIR"
Ignored
.IP "--run COMMAND ARG..."
Run COMMAND with mold as /usr/bin/ld
.IP "--shared, --Bshareable"
Create a share library
.IP "--sort-common"
Ignored
.IP "--sort-section"
Ignored
.IP "--spare-dynamic-tags NUMBE"
R Reserve give number of tags in .dynamic section
.IP "--static"
Do not link against shared libraries
.IP "--stats"
Print input statistics
.IP "--sysroot DIR"
Set target system root directory
.IP "--thread-count COUNT"
Use COUNT number of threads
.IP "--threads"
Use multiple threads (default)
.IP "--no-threads"
Do not use multiple threads
.IP "--trace"
Print name of each input file
.IP "--version-script FILE"
Read version script
.IP "--warn-common"
Warn about common symbols
.IP "--no-warn-common"
Do not warn about common symbols
.IP "--whole-archive"
Include all objects from static archives
.IP "--no-whole-archive"
Do not include all objects from static archives
.IP "-z now"
Disable lazy function resolution
.IP "-z lazy"
Enable lazy function resolution (default)
.IP "-z execstack"
Require executable stack
.IP "-z noexecstack"
Do not require executable stack (default)
.IP "-z relro"
Make some sections read-only after relocation (default)
.IP "-z norelro"
Do not use relro
.IP "-z defs"
Report undefined symbols (even with --shared)
.IP "-z nodefs"
Do not report undefined symbols
.IP "-z nodlopen"
Mark DSO not available to dlopen
.IP "-z nodelete"
Mark DSO non-deletable at runtime
.IP "-z nocopyreloc"
Do not create copy relocations
.IP "-z initfirst"
Mark DSO to be initialized first at runtime
.IP "-z interpose"
Mark object to interpose all DSOs but executable

.SH BUGS
Report bugs at \fBhttps://github.com/rui314/mold/issues\fR.

.SH AUTHOR
Rui Ueyama <\fBruiu@cs\&.stanford\&.edu\fR>

.SH "SEE ALSO"
.BR ld (1),
.BR gold (1)
.BR ld.so (8)
